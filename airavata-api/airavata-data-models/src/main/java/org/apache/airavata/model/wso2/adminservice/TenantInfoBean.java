/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.wso2.adminservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TenantInfoBean implements org.apache.thrift.TBase<TenantInfoBean, TenantInfoBean._Fields>, java.io.Serializable, Cloneable, Comparable<TenantInfoBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TenantInfoBean");

  private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField PASSWORD_CREDENTIAL_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("passwordCredentialToken", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ORIGINATED_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("originatedService", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SUCCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("successKey", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TENANT_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantDomain", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField USAGE_PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("usagePlan", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TenantInfoBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TenantInfoBeanTupleSchemeFactory());
  }

  private boolean active; // required
  private String passwordCredentialToken; // required
  private String createdDate; // optional
  private String email; // optional
  private String firstName; // required
  private String lastName; // required
  private String originatedService; // optional
  private String successKey; // optional
  private String tenantDomain; // required
  private int tenantId; // required
  private String usagePlan; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTIVE((short)1, "active"),
    PASSWORD_CREDENTIAL_TOKEN((short)2, "passwordCredentialToken"),
    CREATED_DATE((short)3, "createdDate"),
    EMAIL((short)4, "email"),
    FIRST_NAME((short)5, "firstName"),
    LAST_NAME((short)6, "lastName"),
    ORIGINATED_SERVICE((short)7, "originatedService"),
    SUCCESS_KEY((short)8, "successKey"),
    TENANT_DOMAIN((short)9, "tenantDomain"),
    TENANT_ID((short)10, "tenantId"),
    USAGE_PLAN((short)11, "usagePlan");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTIVE
          return ACTIVE;
        case 2: // PASSWORD_CREDENTIAL_TOKEN
          return PASSWORD_CREDENTIAL_TOKEN;
        case 3: // CREATED_DATE
          return CREATED_DATE;
        case 4: // EMAIL
          return EMAIL;
        case 5: // FIRST_NAME
          return FIRST_NAME;
        case 6: // LAST_NAME
          return LAST_NAME;
        case 7: // ORIGINATED_SERVICE
          return ORIGINATED_SERVICE;
        case 8: // SUCCESS_KEY
          return SUCCESS_KEY;
        case 9: // TENANT_DOMAIN
          return TENANT_DOMAIN;
        case 10: // TENANT_ID
          return TENANT_ID;
        case 11: // USAGE_PLAN
          return USAGE_PLAN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTIVE_ISSET_ID = 0;
  private static final int __TENANTID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CREATED_DATE,_Fields.EMAIL,_Fields.ORIGINATED_SERVICE,_Fields.SUCCESS_KEY,_Fields.USAGE_PLAN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PASSWORD_CREDENTIAL_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("passwordCredentialToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_DATE, new org.apache.thrift.meta_data.FieldMetaData("createdDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("lastName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINATED_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("originatedService", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("successKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TENANT_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("tenantDomain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USAGE_PLAN, new org.apache.thrift.meta_data.FieldMetaData("usagePlan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TenantInfoBean.class, metaDataMap);
  }

  public TenantInfoBean() {
  }

  public TenantInfoBean(
    boolean active,
    String passwordCredentialToken,
    String firstName,
    String lastName,
    String tenantDomain,
    int tenantId)
  {
    this();
    this.active = active;
    setActiveIsSet(true);
    this.passwordCredentialToken = passwordCredentialToken;
    this.firstName = firstName;
    this.lastName = lastName;
    this.tenantDomain = tenantDomain;
    this.tenantId = tenantId;
    setTenantIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TenantInfoBean(TenantInfoBean other) {
    __isset_bitfield = other.__isset_bitfield;
    this.active = other.active;
    if (other.isSetPasswordCredentialToken()) {
      this.passwordCredentialToken = other.passwordCredentialToken;
    }
    if (other.isSetCreatedDate()) {
      this.createdDate = other.createdDate;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetLastName()) {
      this.lastName = other.lastName;
    }
    if (other.isSetOriginatedService()) {
      this.originatedService = other.originatedService;
    }
    if (other.isSetSuccessKey()) {
      this.successKey = other.successKey;
    }
    if (other.isSetTenantDomain()) {
      this.tenantDomain = other.tenantDomain;
    }
    this.tenantId = other.tenantId;
    if (other.isSetUsagePlan()) {
      this.usagePlan = other.usagePlan;
    }
  }

  public TenantInfoBean deepCopy() {
    return new TenantInfoBean(this);
  }

  @Override
  public void clear() {
    setActiveIsSet(false);
    this.active = false;
    this.passwordCredentialToken = null;
    this.createdDate = null;
    this.email = null;
    this.firstName = null;
    this.lastName = null;
    this.originatedService = null;
    this.successKey = null;
    this.tenantDomain = null;
    setTenantIdIsSet(false);
    this.tenantId = 0;
    this.usagePlan = null;
  }

  public boolean isActive() {
    return this.active;
  }

  public void setActive(boolean active) {
    this.active = active;
    setActiveIsSet(true);
  }

  public void unsetActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  /** Returns true if field active is set (has been assigned a value) and false otherwise */
  public boolean isSetActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  public void setActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
  }

  public String getPasswordCredentialToken() {
    return this.passwordCredentialToken;
  }

  public void setPasswordCredentialToken(String passwordCredentialToken) {
    this.passwordCredentialToken = passwordCredentialToken;
  }

  public void unsetPasswordCredentialToken() {
    this.passwordCredentialToken = null;
  }

  /** Returns true if field passwordCredentialToken is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswordCredentialToken() {
    return this.passwordCredentialToken != null;
  }

  public void setPasswordCredentialTokenIsSet(boolean value) {
    if (!value) {
      this.passwordCredentialToken = null;
    }
  }

  public String getCreatedDate() {
    return this.createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }

  public void unsetCreatedDate() {
    this.createdDate = null;
  }

  /** Returns true if field createdDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedDate() {
    return this.createdDate != null;
  }

  public void setCreatedDateIsSet(boolean value) {
    if (!value) {
      this.createdDate = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getFirstName() {
    return this.firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  public String getLastName() {
    return this.lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public void unsetLastName() {
    this.lastName = null;
  }

  /** Returns true if field lastName is set (has been assigned a value) and false otherwise */
  public boolean isSetLastName() {
    return this.lastName != null;
  }

  public void setLastNameIsSet(boolean value) {
    if (!value) {
      this.lastName = null;
    }
  }

  public String getOriginatedService() {
    return this.originatedService;
  }

  public void setOriginatedService(String originatedService) {
    this.originatedService = originatedService;
  }

  public void unsetOriginatedService() {
    this.originatedService = null;
  }

  /** Returns true if field originatedService is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginatedService() {
    return this.originatedService != null;
  }

  public void setOriginatedServiceIsSet(boolean value) {
    if (!value) {
      this.originatedService = null;
    }
  }

  public String getSuccessKey() {
    return this.successKey;
  }

  public void setSuccessKey(String successKey) {
    this.successKey = successKey;
  }

  public void unsetSuccessKey() {
    this.successKey = null;
  }

  /** Returns true if field successKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessKey() {
    return this.successKey != null;
  }

  public void setSuccessKeyIsSet(boolean value) {
    if (!value) {
      this.successKey = null;
    }
  }

  public String getTenantDomain() {
    return this.tenantDomain;
  }

  public void setTenantDomain(String tenantDomain) {
    this.tenantDomain = tenantDomain;
  }

  public void unsetTenantDomain() {
    this.tenantDomain = null;
  }

  /** Returns true if field tenantDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetTenantDomain() {
    return this.tenantDomain != null;
  }

  public void setTenantDomainIsSet(boolean value) {
    if (!value) {
      this.tenantDomain = null;
    }
  }

  public int getTenantId() {
    return this.tenantId;
  }

  public void setTenantId(int tenantId) {
    this.tenantId = tenantId;
    setTenantIdIsSet(true);
  }

  public void unsetTenantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TENANTID_ISSET_ID);
  }

  /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
  public boolean isSetTenantId() {
    return EncodingUtils.testBit(__isset_bitfield, __TENANTID_ISSET_ID);
  }

  public void setTenantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TENANTID_ISSET_ID, value);
  }

  public String getUsagePlan() {
    return this.usagePlan;
  }

  public void setUsagePlan(String usagePlan) {
    this.usagePlan = usagePlan;
  }

  public void unsetUsagePlan() {
    this.usagePlan = null;
  }

  /** Returns true if field usagePlan is set (has been assigned a value) and false otherwise */
  public boolean isSetUsagePlan() {
    return this.usagePlan != null;
  }

  public void setUsagePlanIsSet(boolean value) {
    if (!value) {
      this.usagePlan = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTIVE:
      if (value == null) {
        unsetActive();
      } else {
        setActive((Boolean)value);
      }
      break;

    case PASSWORD_CREDENTIAL_TOKEN:
      if (value == null) {
        unsetPasswordCredentialToken();
      } else {
        setPasswordCredentialToken((String)value);
      }
      break;

    case CREATED_DATE:
      if (value == null) {
        unsetCreatedDate();
      } else {
        setCreatedDate((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((String)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLastName();
      } else {
        setLastName((String)value);
      }
      break;

    case ORIGINATED_SERVICE:
      if (value == null) {
        unsetOriginatedService();
      } else {
        setOriginatedService((String)value);
      }
      break;

    case SUCCESS_KEY:
      if (value == null) {
        unsetSuccessKey();
      } else {
        setSuccessKey((String)value);
      }
      break;

    case TENANT_DOMAIN:
      if (value == null) {
        unsetTenantDomain();
      } else {
        setTenantDomain((String)value);
      }
      break;

    case TENANT_ID:
      if (value == null) {
        unsetTenantId();
      } else {
        setTenantId((Integer)value);
      }
      break;

    case USAGE_PLAN:
      if (value == null) {
        unsetUsagePlan();
      } else {
        setUsagePlan((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTIVE:
      return isActive();

    case PASSWORD_CREDENTIAL_TOKEN:
      return getPasswordCredentialToken();

    case CREATED_DATE:
      return getCreatedDate();

    case EMAIL:
      return getEmail();

    case FIRST_NAME:
      return getFirstName();

    case LAST_NAME:
      return getLastName();

    case ORIGINATED_SERVICE:
      return getOriginatedService();

    case SUCCESS_KEY:
      return getSuccessKey();

    case TENANT_DOMAIN:
      return getTenantDomain();

    case TENANT_ID:
      return getTenantId();

    case USAGE_PLAN:
      return getUsagePlan();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTIVE:
      return isSetActive();
    case PASSWORD_CREDENTIAL_TOKEN:
      return isSetPasswordCredentialToken();
    case CREATED_DATE:
      return isSetCreatedDate();
    case EMAIL:
      return isSetEmail();
    case FIRST_NAME:
      return isSetFirstName();
    case LAST_NAME:
      return isSetLastName();
    case ORIGINATED_SERVICE:
      return isSetOriginatedService();
    case SUCCESS_KEY:
      return isSetSuccessKey();
    case TENANT_DOMAIN:
      return isSetTenantDomain();
    case TENANT_ID:
      return isSetTenantId();
    case USAGE_PLAN:
      return isSetUsagePlan();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TenantInfoBean)
      return this.equals((TenantInfoBean)that);
    return false;
  }

  public boolean equals(TenantInfoBean that) {
    if (that == null)
      return false;

    boolean this_present_active = true;
    boolean that_present_active = true;
    if (this_present_active || that_present_active) {
      if (!(this_present_active && that_present_active))
        return false;
      if (this.active != that.active)
        return false;
    }

    boolean this_present_passwordCredentialToken = true && this.isSetPasswordCredentialToken();
    boolean that_present_passwordCredentialToken = true && that.isSetPasswordCredentialToken();
    if (this_present_passwordCredentialToken || that_present_passwordCredentialToken) {
      if (!(this_present_passwordCredentialToken && that_present_passwordCredentialToken))
        return false;
      if (!this.passwordCredentialToken.equals(that.passwordCredentialToken))
        return false;
    }

    boolean this_present_createdDate = true && this.isSetCreatedDate();
    boolean that_present_createdDate = true && that.isSetCreatedDate();
    if (this_present_createdDate || that_present_createdDate) {
      if (!(this_present_createdDate && that_present_createdDate))
        return false;
      if (!this.createdDate.equals(that.createdDate))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_firstName = true && this.isSetFirstName();
    boolean that_present_firstName = true && that.isSetFirstName();
    if (this_present_firstName || that_present_firstName) {
      if (!(this_present_firstName && that_present_firstName))
        return false;
      if (!this.firstName.equals(that.firstName))
        return false;
    }

    boolean this_present_lastName = true && this.isSetLastName();
    boolean that_present_lastName = true && that.isSetLastName();
    if (this_present_lastName || that_present_lastName) {
      if (!(this_present_lastName && that_present_lastName))
        return false;
      if (!this.lastName.equals(that.lastName))
        return false;
    }

    boolean this_present_originatedService = true && this.isSetOriginatedService();
    boolean that_present_originatedService = true && that.isSetOriginatedService();
    if (this_present_originatedService || that_present_originatedService) {
      if (!(this_present_originatedService && that_present_originatedService))
        return false;
      if (!this.originatedService.equals(that.originatedService))
        return false;
    }

    boolean this_present_successKey = true && this.isSetSuccessKey();
    boolean that_present_successKey = true && that.isSetSuccessKey();
    if (this_present_successKey || that_present_successKey) {
      if (!(this_present_successKey && that_present_successKey))
        return false;
      if (!this.successKey.equals(that.successKey))
        return false;
    }

    boolean this_present_tenantDomain = true && this.isSetTenantDomain();
    boolean that_present_tenantDomain = true && that.isSetTenantDomain();
    if (this_present_tenantDomain || that_present_tenantDomain) {
      if (!(this_present_tenantDomain && that_present_tenantDomain))
        return false;
      if (!this.tenantDomain.equals(that.tenantDomain))
        return false;
    }

    boolean this_present_tenantId = true;
    boolean that_present_tenantId = true;
    if (this_present_tenantId || that_present_tenantId) {
      if (!(this_present_tenantId && that_present_tenantId))
        return false;
      if (this.tenantId != that.tenantId)
        return false;
    }

    boolean this_present_usagePlan = true && this.isSetUsagePlan();
    boolean that_present_usagePlan = true && that.isSetUsagePlan();
    if (this_present_usagePlan || that_present_usagePlan) {
      if (!(this_present_usagePlan && that_present_usagePlan))
        return false;
      if (!this.usagePlan.equals(that.usagePlan))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_active = true;
    list.add(present_active);
    if (present_active)
      list.add(active);

    boolean present_passwordCredentialToken = true && (isSetPasswordCredentialToken());
    list.add(present_passwordCredentialToken);
    if (present_passwordCredentialToken)
      list.add(passwordCredentialToken);

    boolean present_createdDate = true && (isSetCreatedDate());
    list.add(present_createdDate);
    if (present_createdDate)
      list.add(createdDate);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_firstName = true && (isSetFirstName());
    list.add(present_firstName);
    if (present_firstName)
      list.add(firstName);

    boolean present_lastName = true && (isSetLastName());
    list.add(present_lastName);
    if (present_lastName)
      list.add(lastName);

    boolean present_originatedService = true && (isSetOriginatedService());
    list.add(present_originatedService);
    if (present_originatedService)
      list.add(originatedService);

    boolean present_successKey = true && (isSetSuccessKey());
    list.add(present_successKey);
    if (present_successKey)
      list.add(successKey);

    boolean present_tenantDomain = true && (isSetTenantDomain());
    list.add(present_tenantDomain);
    if (present_tenantDomain)
      list.add(tenantDomain);

    boolean present_tenantId = true;
    list.add(present_tenantId);
    if (present_tenantId)
      list.add(tenantId);

    boolean present_usagePlan = true && (isSetUsagePlan());
    list.add(present_usagePlan);
    if (present_usagePlan)
      list.add(usagePlan);

    return list.hashCode();
  }

  @Override
  public int compareTo(TenantInfoBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetActive()).compareTo(other.isSetActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, other.active);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPasswordCredentialToken()).compareTo(other.isSetPasswordCredentialToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswordCredentialToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwordCredentialToken, other.passwordCredentialToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedDate()).compareTo(other.isSetCreatedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdDate, other.createdDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastName()).compareTo(other.isSetLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastName, other.lastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginatedService()).compareTo(other.isSetOriginatedService());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginatedService()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originatedService, other.originatedService);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessKey()).compareTo(other.isSetSuccessKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successKey, other.successKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTenantDomain()).compareTo(other.isSetTenantDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenantDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantDomain, other.tenantDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsagePlan()).compareTo(other.isSetUsagePlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsagePlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usagePlan, other.usagePlan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TenantInfoBean(");
    boolean first = true;

    sb.append("active:");
    sb.append(this.active);
    first = false;
    if (!first) sb.append(", ");
    sb.append("passwordCredentialToken:");
    if (this.passwordCredentialToken == null) {
      sb.append("null");
    } else {
      sb.append(this.passwordCredentialToken);
    }
    first = false;
    if (isSetCreatedDate()) {
      if (!first) sb.append(", ");
      sb.append("createdDate:");
      if (this.createdDate == null) {
        sb.append("null");
      } else {
        sb.append(this.createdDate);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("firstName:");
    if (this.firstName == null) {
      sb.append("null");
    } else {
      sb.append(this.firstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastName:");
    if (this.lastName == null) {
      sb.append("null");
    } else {
      sb.append(this.lastName);
    }
    first = false;
    if (isSetOriginatedService()) {
      if (!first) sb.append(", ");
      sb.append("originatedService:");
      if (this.originatedService == null) {
        sb.append("null");
      } else {
        sb.append(this.originatedService);
      }
      first = false;
    }
    if (isSetSuccessKey()) {
      if (!first) sb.append(", ");
      sb.append("successKey:");
      if (this.successKey == null) {
        sb.append("null");
      } else {
        sb.append(this.successKey);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("tenantDomain:");
    if (this.tenantDomain == null) {
      sb.append("null");
    } else {
      sb.append(this.tenantDomain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tenantId:");
    sb.append(this.tenantId);
    first = false;
    if (isSetUsagePlan()) {
      if (!first) sb.append(", ");
      sb.append("usagePlan:");
      if (this.usagePlan == null) {
        sb.append("null");
      } else {
        sb.append(this.usagePlan);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetActive()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'active' is unset! Struct:" + toString());
    }

    if (!isSetPasswordCredentialToken()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'passwordCredentialToken' is unset! Struct:" + toString());
    }

    if (!isSetFirstName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'firstName' is unset! Struct:" + toString());
    }

    if (!isSetLastName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastName' is unset! Struct:" + toString());
    }

    if (!isSetTenantDomain()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tenantDomain' is unset! Struct:" + toString());
    }

    if (!isSetTenantId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tenantId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TenantInfoBeanStandardSchemeFactory implements SchemeFactory {
    public TenantInfoBeanStandardScheme getScheme() {
      return new TenantInfoBeanStandardScheme();
    }
  }

  private static class TenantInfoBeanStandardScheme extends StandardScheme<TenantInfoBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TenantInfoBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.active = iprot.readBool();
              struct.setActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PASSWORD_CREDENTIAL_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passwordCredentialToken = iprot.readString();
              struct.setPasswordCredentialTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdDate = iprot.readString();
              struct.setCreatedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstName = iprot.readString();
              struct.setFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastName = iprot.readString();
              struct.setLastNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORIGINATED_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originatedService = iprot.readString();
              struct.setOriginatedServiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUCCESS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.successKey = iprot.readString();
              struct.setSuccessKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TENANT_DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tenantDomain = iprot.readString();
              struct.setTenantDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TENANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tenantId = iprot.readI32();
              struct.setTenantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USAGE_PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.usagePlan = iprot.readString();
              struct.setUsagePlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TenantInfoBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
      oprot.writeBool(struct.active);
      oprot.writeFieldEnd();
      if (struct.passwordCredentialToken != null) {
        oprot.writeFieldBegin(PASSWORD_CREDENTIAL_TOKEN_FIELD_DESC);
        oprot.writeString(struct.passwordCredentialToken);
        oprot.writeFieldEnd();
      }
      if (struct.createdDate != null) {
        if (struct.isSetCreatedDate()) {
          oprot.writeFieldBegin(CREATED_DATE_FIELD_DESC);
          oprot.writeString(struct.createdDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.firstName != null) {
        oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.firstName);
        oprot.writeFieldEnd();
      }
      if (struct.lastName != null) {
        oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
        oprot.writeString(struct.lastName);
        oprot.writeFieldEnd();
      }
      if (struct.originatedService != null) {
        if (struct.isSetOriginatedService()) {
          oprot.writeFieldBegin(ORIGINATED_SERVICE_FIELD_DESC);
          oprot.writeString(struct.originatedService);
          oprot.writeFieldEnd();
        }
      }
      if (struct.successKey != null) {
        if (struct.isSetSuccessKey()) {
          oprot.writeFieldBegin(SUCCESS_KEY_FIELD_DESC);
          oprot.writeString(struct.successKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tenantDomain != null) {
        oprot.writeFieldBegin(TENANT_DOMAIN_FIELD_DESC);
        oprot.writeString(struct.tenantDomain);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
      oprot.writeI32(struct.tenantId);
      oprot.writeFieldEnd();
      if (struct.usagePlan != null) {
        if (struct.isSetUsagePlan()) {
          oprot.writeFieldBegin(USAGE_PLAN_FIELD_DESC);
          oprot.writeString(struct.usagePlan);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TenantInfoBeanTupleSchemeFactory implements SchemeFactory {
    public TenantInfoBeanTupleScheme getScheme() {
      return new TenantInfoBeanTupleScheme();
    }
  }

  private static class TenantInfoBeanTupleScheme extends TupleScheme<TenantInfoBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TenantInfoBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.active);
      oprot.writeString(struct.passwordCredentialToken);
      oprot.writeString(struct.firstName);
      oprot.writeString(struct.lastName);
      oprot.writeString(struct.tenantDomain);
      oprot.writeI32(struct.tenantId);
      BitSet optionals = new BitSet();
      if (struct.isSetCreatedDate()) {
        optionals.set(0);
      }
      if (struct.isSetEmail()) {
        optionals.set(1);
      }
      if (struct.isSetOriginatedService()) {
        optionals.set(2);
      }
      if (struct.isSetSuccessKey()) {
        optionals.set(3);
      }
      if (struct.isSetUsagePlan()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCreatedDate()) {
        oprot.writeString(struct.createdDate);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetOriginatedService()) {
        oprot.writeString(struct.originatedService);
      }
      if (struct.isSetSuccessKey()) {
        oprot.writeString(struct.successKey);
      }
      if (struct.isSetUsagePlan()) {
        oprot.writeString(struct.usagePlan);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TenantInfoBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.active = iprot.readBool();
      struct.setActiveIsSet(true);
      struct.passwordCredentialToken = iprot.readString();
      struct.setPasswordCredentialTokenIsSet(true);
      struct.firstName = iprot.readString();
      struct.setFirstNameIsSet(true);
      struct.lastName = iprot.readString();
      struct.setLastNameIsSet(true);
      struct.tenantDomain = iprot.readString();
      struct.setTenantDomainIsSet(true);
      struct.tenantId = iprot.readI32();
      struct.setTenantIdIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.createdDate = iprot.readString();
        struct.setCreatedDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(2)) {
        struct.originatedService = iprot.readString();
        struct.setOriginatedServiceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.successKey = iprot.readString();
        struct.setSuccessKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.usagePlan = iprot.readString();
        struct.setUsagePlanIsSet(true);
      }
    }
  }

}

