/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.wso2.adminservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class ServiceProvider implements org.apache.thrift.TBase<ServiceProvider, ServiceProvider._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceProvider> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceProvider");

  private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TENANT_ADMIN_PWDCREDS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantAdminPWDCredsToken", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OAUTH_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("OAuthConfig", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceProviderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceProviderTupleSchemeFactory());
  }

  private int applicationId; // optional
  private String applicationName; // required
  private String description; // required
  private String tenantAdminPWDCredsToken; // required
  private OAuthApplicationData OAuthConfig; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION_ID((short)1, "applicationId"),
    APPLICATION_NAME((short)2, "applicationName"),
    DESCRIPTION((short)3, "description"),
    TENANT_ADMIN_PWDCREDS_TOKEN((short)4, "tenantAdminPWDCredsToken"),
    OAUTH_CONFIG((short)5, "OAuthConfig");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION_ID
          return APPLICATION_ID;
        case 2: // APPLICATION_NAME
          return APPLICATION_NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // TENANT_ADMIN_PWDCREDS_TOKEN
          return TENANT_ADMIN_PWDCREDS_TOKEN;
        case 5: // OAUTH_CONFIG
          return OAUTH_CONFIG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPLICATIONID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.APPLICATION_ID,_Fields.OAUTH_CONFIG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("applicationName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TENANT_ADMIN_PWDCREDS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("tenantAdminPWDCredsToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OAUTH_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("OAuthConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "OAuthApplicationData")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceProvider.class, metaDataMap);
  }

  public ServiceProvider() {
  }

  public ServiceProvider(
    String applicationName,
    String description,
    String tenantAdminPWDCredsToken)
  {
    this();
    this.applicationName = applicationName;
    this.description = description;
    this.tenantAdminPWDCredsToken = tenantAdminPWDCredsToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceProvider(ServiceProvider other) {
    __isset_bitfield = other.__isset_bitfield;
    this.applicationId = other.applicationId;
    if (other.isSetApplicationName()) {
      this.applicationName = other.applicationName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetTenantAdminPWDCredsToken()) {
      this.tenantAdminPWDCredsToken = other.tenantAdminPWDCredsToken;
    }
    if (other.isSetOAuthConfig()) {
      this.OAuthConfig = other.OAuthConfig;
    }
  }

  public ServiceProvider deepCopy() {
    return new ServiceProvider(this);
  }

  @Override
  public void clear() {
    setApplicationIdIsSet(false);
    this.applicationId = 0;
    this.applicationName = null;
    this.description = null;
    this.tenantAdminPWDCredsToken = null;
    this.OAuthConfig = null;
  }

  public int getApplicationId() {
    return this.applicationId;
  }

  public void setApplicationId(int applicationId) {
    this.applicationId = applicationId;
    setApplicationIdIsSet(true);
  }

  public void unsetApplicationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
  }

  /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLICATIONID_ISSET_ID);
  }

  public void setApplicationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLICATIONID_ISSET_ID, value);
  }

  public String getApplicationName() {
    return this.applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }

  public void unsetApplicationName() {
    this.applicationName = null;
  }

  /** Returns true if field applicationName is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationName() {
    return this.applicationName != null;
  }

  public void setApplicationNameIsSet(boolean value) {
    if (!value) {
      this.applicationName = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getTenantAdminPWDCredsToken() {
    return this.tenantAdminPWDCredsToken;
  }

  public void setTenantAdminPWDCredsToken(String tenantAdminPWDCredsToken) {
    this.tenantAdminPWDCredsToken = tenantAdminPWDCredsToken;
  }

  public void unsetTenantAdminPWDCredsToken() {
    this.tenantAdminPWDCredsToken = null;
  }

  /** Returns true if field tenantAdminPWDCredsToken is set (has been assigned a value) and false otherwise */
  public boolean isSetTenantAdminPWDCredsToken() {
    return this.tenantAdminPWDCredsToken != null;
  }

  public void setTenantAdminPWDCredsTokenIsSet(boolean value) {
    if (!value) {
      this.tenantAdminPWDCredsToken = null;
    }
  }

  public OAuthApplicationData getOAuthConfig() {
    return this.OAuthConfig;
  }

  public void setOAuthConfig(OAuthApplicationData OAuthConfig) {
    this.OAuthConfig = OAuthConfig;
  }

  public void unsetOAuthConfig() {
    this.OAuthConfig = null;
  }

  /** Returns true if field OAuthConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetOAuthConfig() {
    return this.OAuthConfig != null;
  }

  public void setOAuthConfigIsSet(boolean value) {
    if (!value) {
      this.OAuthConfig = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLICATION_ID:
      if (value == null) {
        unsetApplicationId();
      } else {
        setApplicationId((Integer)value);
      }
      break;

    case APPLICATION_NAME:
      if (value == null) {
        unsetApplicationName();
      } else {
        setApplicationName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case TENANT_ADMIN_PWDCREDS_TOKEN:
      if (value == null) {
        unsetTenantAdminPWDCredsToken();
      } else {
        setTenantAdminPWDCredsToken((String)value);
      }
      break;

    case OAUTH_CONFIG:
      if (value == null) {
        unsetOAuthConfig();
      } else {
        setOAuthConfig((OAuthApplicationData)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION_ID:
      return getApplicationId();

    case APPLICATION_NAME:
      return getApplicationName();

    case DESCRIPTION:
      return getDescription();

    case TENANT_ADMIN_PWDCREDS_TOKEN:
      return getTenantAdminPWDCredsToken();

    case OAUTH_CONFIG:
      return getOAuthConfig();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION_ID:
      return isSetApplicationId();
    case APPLICATION_NAME:
      return isSetApplicationName();
    case DESCRIPTION:
      return isSetDescription();
    case TENANT_ADMIN_PWDCREDS_TOKEN:
      return isSetTenantAdminPWDCredsToken();
    case OAUTH_CONFIG:
      return isSetOAuthConfig();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceProvider)
      return this.equals((ServiceProvider)that);
    return false;
  }

  public boolean equals(ServiceProvider that) {
    if (that == null)
      return false;

    boolean this_present_applicationId = true && this.isSetApplicationId();
    boolean that_present_applicationId = true && that.isSetApplicationId();
    if (this_present_applicationId || that_present_applicationId) {
      if (!(this_present_applicationId && that_present_applicationId))
        return false;
      if (this.applicationId != that.applicationId)
        return false;
    }

    boolean this_present_applicationName = true && this.isSetApplicationName();
    boolean that_present_applicationName = true && that.isSetApplicationName();
    if (this_present_applicationName || that_present_applicationName) {
      if (!(this_present_applicationName && that_present_applicationName))
        return false;
      if (!this.applicationName.equals(that.applicationName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_tenantAdminPWDCredsToken = true && this.isSetTenantAdminPWDCredsToken();
    boolean that_present_tenantAdminPWDCredsToken = true && that.isSetTenantAdminPWDCredsToken();
    if (this_present_tenantAdminPWDCredsToken || that_present_tenantAdminPWDCredsToken) {
      if (!(this_present_tenantAdminPWDCredsToken && that_present_tenantAdminPWDCredsToken))
        return false;
      if (!this.tenantAdminPWDCredsToken.equals(that.tenantAdminPWDCredsToken))
        return false;
    }

    boolean this_present_OAuthConfig = true && this.isSetOAuthConfig();
    boolean that_present_OAuthConfig = true && that.isSetOAuthConfig();
    if (this_present_OAuthConfig || that_present_OAuthConfig) {
      if (!(this_present_OAuthConfig && that_present_OAuthConfig))
        return false;
      if (!this.OAuthConfig.equals(that.OAuthConfig))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_applicationId = true && (isSetApplicationId());
    list.add(present_applicationId);
    if (present_applicationId)
      list.add(applicationId);

    boolean present_applicationName = true && (isSetApplicationName());
    list.add(present_applicationName);
    if (present_applicationName)
      list.add(applicationName);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_tenantAdminPWDCredsToken = true && (isSetTenantAdminPWDCredsToken());
    list.add(present_tenantAdminPWDCredsToken);
    if (present_tenantAdminPWDCredsToken)
      list.add(tenantAdminPWDCredsToken);

    boolean present_OAuthConfig = true && (isSetOAuthConfig());
    list.add(present_OAuthConfig);
    if (present_OAuthConfig)
      list.add(OAuthConfig);

    return list.hashCode();
  }

  @Override
  public int compareTo(ServiceProvider other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationName()).compareTo(other.isSetApplicationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationName, other.applicationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTenantAdminPWDCredsToken()).compareTo(other.isSetTenantAdminPWDCredsToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenantAdminPWDCredsToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantAdminPWDCredsToken, other.tenantAdminPWDCredsToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOAuthConfig()).compareTo(other.isSetOAuthConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOAuthConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OAuthConfig, other.OAuthConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceProvider(");
    boolean first = true;

    if (isSetApplicationId()) {
      sb.append("applicationId:");
      sb.append(this.applicationId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("applicationName:");
    if (this.applicationName == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tenantAdminPWDCredsToken:");
    if (this.tenantAdminPWDCredsToken == null) {
      sb.append("null");
    } else {
      sb.append(this.tenantAdminPWDCredsToken);
    }
    first = false;
    if (isSetOAuthConfig()) {
      if (!first) sb.append(", ");
      sb.append("OAuthConfig:");
      if (this.OAuthConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.OAuthConfig);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetApplicationName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationName' is unset! Struct:" + toString());
    }

    if (!isSetDescription()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' is unset! Struct:" + toString());
    }

    if (!isSetTenantAdminPWDCredsToken()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tenantAdminPWDCredsToken' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceProviderStandardSchemeFactory implements SchemeFactory {
    public ServiceProviderStandardScheme getScheme() {
      return new ServiceProviderStandardScheme();
    }
  }

  private static class ServiceProviderStandardScheme extends StandardScheme<ServiceProvider> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceProvider struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applicationId = iprot.readI32();
              struct.setApplicationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationName = iprot.readString();
              struct.setApplicationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TENANT_ADMIN_PWDCREDS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tenantAdminPWDCredsToken = iprot.readString();
              struct.setTenantAdminPWDCredsTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OAUTH_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.OAuthConfig = new OAuthApplicationData();
              struct.OAuthConfig.read(iprot);
              struct.setOAuthConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceProvider struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetApplicationId()) {
        oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
        oprot.writeI32(struct.applicationId);
        oprot.writeFieldEnd();
      }
      if (struct.applicationName != null) {
        oprot.writeFieldBegin(APPLICATION_NAME_FIELD_DESC);
        oprot.writeString(struct.applicationName);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.tenantAdminPWDCredsToken != null) {
        oprot.writeFieldBegin(TENANT_ADMIN_PWDCREDS_TOKEN_FIELD_DESC);
        oprot.writeString(struct.tenantAdminPWDCredsToken);
        oprot.writeFieldEnd();
      }
      if (struct.OAuthConfig != null) {
        if (struct.isSetOAuthConfig()) {
          oprot.writeFieldBegin(OAUTH_CONFIG_FIELD_DESC);
          struct.OAuthConfig.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceProviderTupleSchemeFactory implements SchemeFactory {
    public ServiceProviderTupleScheme getScheme() {
      return new ServiceProviderTupleScheme();
    }
  }

  private static class ServiceProviderTupleScheme extends TupleScheme<ServiceProvider> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceProvider struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.applicationName);
      oprot.writeString(struct.description);
      oprot.writeString(struct.tenantAdminPWDCredsToken);
      BitSet optionals = new BitSet();
      if (struct.isSetApplicationId()) {
        optionals.set(0);
      }
      if (struct.isSetOAuthConfig()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetApplicationId()) {
        oprot.writeI32(struct.applicationId);
      }
      if (struct.isSetOAuthConfig()) {
        struct.OAuthConfig.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceProvider struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.applicationName = iprot.readString();
      struct.setApplicationNameIsSet(true);
      struct.description = iprot.readString();
      struct.setDescriptionIsSet(true);
      struct.tenantAdminPWDCredsToken = iprot.readString();
      struct.setTenantAdminPWDCredsTokenIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.applicationId = iprot.readI32();
        struct.setApplicationIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.OAuthConfig = new OAuthApplicationData();
        struct.OAuthConfig.read(iprot);
        struct.setOAuthConfigIsSet(true);
      }
    }
  }

}

