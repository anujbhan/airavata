/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.wso2.adminservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class OAuthApplicationData implements org.apache.thrift.TBase<OAuthApplicationData, OAuthApplicationData._Fields>, java.io.Serializable, Cloneable, Comparable<OAuthApplicationData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OAuthApplicationData");

  private static final org.apache.thrift.protocol.TField OAUTH_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("OAuthVersion", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GRANT_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("grantTypes", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OAuthApplicationDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OAuthApplicationDataTupleSchemeFactory());
  }

  private String OAuthVersion; // required
  private String applicationName; // required
  private List<String> grantTypes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OAUTH_VERSION((short)1, "OAuthVersion"),
    APPLICATION_NAME((short)2, "applicationName"),
    GRANT_TYPES((short)3, "grantTypes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OAUTH_VERSION
          return OAUTH_VERSION;
        case 2: // APPLICATION_NAME
          return APPLICATION_NAME;
        case 3: // GRANT_TYPES
          return GRANT_TYPES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OAUTH_VERSION, new org.apache.thrift.meta_data.FieldMetaData("OAuthVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("applicationName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GRANT_TYPES, new org.apache.thrift.meta_data.FieldMetaData("grantTypes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OAuthApplicationData.class, metaDataMap);
  }

  public OAuthApplicationData() {
  }

  public OAuthApplicationData(
    String OAuthVersion,
    String applicationName,
    List<String> grantTypes)
  {
    this();
    this.OAuthVersion = OAuthVersion;
    this.applicationName = applicationName;
    this.grantTypes = grantTypes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OAuthApplicationData(OAuthApplicationData other) {
    if (other.isSetOAuthVersion()) {
      this.OAuthVersion = other.OAuthVersion;
    }
    if (other.isSetApplicationName()) {
      this.applicationName = other.applicationName;
    }
    if (other.isSetGrantTypes()) {
      List<String> __this__grantTypes = new ArrayList<String>(other.grantTypes);
      this.grantTypes = __this__grantTypes;
    }
  }

  public OAuthApplicationData deepCopy() {
    return new OAuthApplicationData(this);
  }

  @Override
  public void clear() {
    this.OAuthVersion = null;
    this.applicationName = null;
    this.grantTypes = null;
  }

  public String getOAuthVersion() {
    return this.OAuthVersion;
  }

  public void setOAuthVersion(String OAuthVersion) {
    this.OAuthVersion = OAuthVersion;
  }

  public void unsetOAuthVersion() {
    this.OAuthVersion = null;
  }

  /** Returns true if field OAuthVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOAuthVersion() {
    return this.OAuthVersion != null;
  }

  public void setOAuthVersionIsSet(boolean value) {
    if (!value) {
      this.OAuthVersion = null;
    }
  }

  public String getApplicationName() {
    return this.applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }

  public void unsetApplicationName() {
    this.applicationName = null;
  }

  /** Returns true if field applicationName is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationName() {
    return this.applicationName != null;
  }

  public void setApplicationNameIsSet(boolean value) {
    if (!value) {
      this.applicationName = null;
    }
  }

  public int getGrantTypesSize() {
    return (this.grantTypes == null) ? 0 : this.grantTypes.size();
  }

  public java.util.Iterator<String> getGrantTypesIterator() {
    return (this.grantTypes == null) ? null : this.grantTypes.iterator();
  }

  public void addToGrantTypes(String elem) {
    if (this.grantTypes == null) {
      this.grantTypes = new ArrayList<String>();
    }
    this.grantTypes.add(elem);
  }

  public List<String> getGrantTypes() {
    return this.grantTypes;
  }

  public void setGrantTypes(List<String> grantTypes) {
    this.grantTypes = grantTypes;
  }

  public void unsetGrantTypes() {
    this.grantTypes = null;
  }

  /** Returns true if field grantTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetGrantTypes() {
    return this.grantTypes != null;
  }

  public void setGrantTypesIsSet(boolean value) {
    if (!value) {
      this.grantTypes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OAUTH_VERSION:
      if (value == null) {
        unsetOAuthVersion();
      } else {
        setOAuthVersion((String)value);
      }
      break;

    case APPLICATION_NAME:
      if (value == null) {
        unsetApplicationName();
      } else {
        setApplicationName((String)value);
      }
      break;

    case GRANT_TYPES:
      if (value == null) {
        unsetGrantTypes();
      } else {
        setGrantTypes((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OAUTH_VERSION:
      return getOAuthVersion();

    case APPLICATION_NAME:
      return getApplicationName();

    case GRANT_TYPES:
      return getGrantTypes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OAUTH_VERSION:
      return isSetOAuthVersion();
    case APPLICATION_NAME:
      return isSetApplicationName();
    case GRANT_TYPES:
      return isSetGrantTypes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OAuthApplicationData)
      return this.equals((OAuthApplicationData)that);
    return false;
  }

  public boolean equals(OAuthApplicationData that) {
    if (that == null)
      return false;

    boolean this_present_OAuthVersion = true && this.isSetOAuthVersion();
    boolean that_present_OAuthVersion = true && that.isSetOAuthVersion();
    if (this_present_OAuthVersion || that_present_OAuthVersion) {
      if (!(this_present_OAuthVersion && that_present_OAuthVersion))
        return false;
      if (!this.OAuthVersion.equals(that.OAuthVersion))
        return false;
    }

    boolean this_present_applicationName = true && this.isSetApplicationName();
    boolean that_present_applicationName = true && that.isSetApplicationName();
    if (this_present_applicationName || that_present_applicationName) {
      if (!(this_present_applicationName && that_present_applicationName))
        return false;
      if (!this.applicationName.equals(that.applicationName))
        return false;
    }

    boolean this_present_grantTypes = true && this.isSetGrantTypes();
    boolean that_present_grantTypes = true && that.isSetGrantTypes();
    if (this_present_grantTypes || that_present_grantTypes) {
      if (!(this_present_grantTypes && that_present_grantTypes))
        return false;
      if (!this.grantTypes.equals(that.grantTypes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_OAuthVersion = true && (isSetOAuthVersion());
    list.add(present_OAuthVersion);
    if (present_OAuthVersion)
      list.add(OAuthVersion);

    boolean present_applicationName = true && (isSetApplicationName());
    list.add(present_applicationName);
    if (present_applicationName)
      list.add(applicationName);

    boolean present_grantTypes = true && (isSetGrantTypes());
    list.add(present_grantTypes);
    if (present_grantTypes)
      list.add(grantTypes);

    return list.hashCode();
  }

  @Override
  public int compareTo(OAuthApplicationData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOAuthVersion()).compareTo(other.isSetOAuthVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOAuthVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OAuthVersion, other.OAuthVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationName()).compareTo(other.isSetApplicationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationName, other.applicationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrantTypes()).compareTo(other.isSetGrantTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrantTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grantTypes, other.grantTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OAuthApplicationData(");
    boolean first = true;

    sb.append("OAuthVersion:");
    if (this.OAuthVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.OAuthVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationName:");
    if (this.applicationName == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("grantTypes:");
    if (this.grantTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.grantTypes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetOAuthVersion()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'OAuthVersion' is unset! Struct:" + toString());
    }

    if (!isSetApplicationName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationName' is unset! Struct:" + toString());
    }

    if (!isSetGrantTypes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'grantTypes' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OAuthApplicationDataStandardSchemeFactory implements SchemeFactory {
    public OAuthApplicationDataStandardScheme getScheme() {
      return new OAuthApplicationDataStandardScheme();
    }
  }

  private static class OAuthApplicationDataStandardScheme extends StandardScheme<OAuthApplicationData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OAuthApplicationData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OAUTH_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OAuthVersion = iprot.readString();
              struct.setOAuthVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationName = iprot.readString();
              struct.setApplicationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GRANT_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.grantTypes = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.grantTypes.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setGrantTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OAuthApplicationData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.OAuthVersion != null) {
        oprot.writeFieldBegin(OAUTH_VERSION_FIELD_DESC);
        oprot.writeString(struct.OAuthVersion);
        oprot.writeFieldEnd();
      }
      if (struct.applicationName != null) {
        oprot.writeFieldBegin(APPLICATION_NAME_FIELD_DESC);
        oprot.writeString(struct.applicationName);
        oprot.writeFieldEnd();
      }
      if (struct.grantTypes != null) {
        oprot.writeFieldBegin(GRANT_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.grantTypes.size()));
          for (String _iter3 : struct.grantTypes)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OAuthApplicationDataTupleSchemeFactory implements SchemeFactory {
    public OAuthApplicationDataTupleScheme getScheme() {
      return new OAuthApplicationDataTupleScheme();
    }
  }

  private static class OAuthApplicationDataTupleScheme extends TupleScheme<OAuthApplicationData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OAuthApplicationData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.OAuthVersion);
      oprot.writeString(struct.applicationName);
      {
        oprot.writeI32(struct.grantTypes.size());
        for (String _iter4 : struct.grantTypes)
        {
          oprot.writeString(_iter4);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OAuthApplicationData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.OAuthVersion = iprot.readString();
      struct.setOAuthVersionIsSet(true);
      struct.applicationName = iprot.readString();
      struct.setApplicationNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.grantTypes = new ArrayList<String>(_list5.size);
        String _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readString();
          struct.grantTypes.add(_elem6);
        }
      }
      struct.setGrantTypesIsSet(true);
    }
  }

}

