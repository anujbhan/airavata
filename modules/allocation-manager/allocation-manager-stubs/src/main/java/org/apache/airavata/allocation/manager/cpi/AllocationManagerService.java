    /*
     * Licensed to the Apache Software Foundation (ASF) under one or more
     * contributor license agreements.  See the NOTICE file distributed with
     * this work for additional information regarding copyright ownership.
     * The ASF licenses this file to You under the Apache License, Version 2.0
     * (the "License"); you may not use this file except in compliance with
     * the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.allocation.manager.cpi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-28")
public class AllocationManagerService {

  public interface Iface {

    public List<org.apache.airavata.model.allocation.ResourceDiscovery> getAllocableResourcesForUser(String userID, String gatewayID) throws org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllocableResourcesForUser(String userID, String gatewayID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<org.apache.airavata.model.allocation.ResourceDiscovery> getAllocableResourcesForUser(String userID, String gatewayID) throws org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException, org.apache.thrift.TException
    {
      send_getAllocableResourcesForUser(userID, gatewayID);
      return recv_getAllocableResourcesForUser();
    }

    public void send_getAllocableResourcesForUser(String userID, String gatewayID) throws org.apache.thrift.TException
    {
      getAllocableResourcesForUser_args args = new getAllocableResourcesForUser_args();
      args.setUserID(userID);
      args.setGatewayID(gatewayID);
      sendBase("getAllocableResourcesForUser", args);
    }

    public List<org.apache.airavata.model.allocation.ResourceDiscovery> recv_getAllocableResourcesForUser() throws org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException, org.apache.thrift.TException
    {
      getAllocableResourcesForUser_result result = new getAllocableResourcesForUser_result();
      receiveBase(result, "getAllocableResourcesForUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllocableResourcesForUser failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllocableResourcesForUser(String userID, String gatewayID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllocableResourcesForUser_call method_call = new getAllocableResourcesForUser_call(userID, gatewayID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllocableResourcesForUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userID;
      private String gatewayID;
      public getAllocableResourcesForUser_call(String userID, String gatewayID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userID = userID;
        this.gatewayID = gatewayID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllocableResourcesForUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllocableResourcesForUser_args args = new getAllocableResourcesForUser_args();
        args.setUserID(userID);
        args.setGatewayID(gatewayID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.allocation.ResourceDiscovery> getResult() throws org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllocableResourcesForUser();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllocableResourcesForUser", new getAllocableResourcesForUser());
      return processMap;
    }

    public static class getAllocableResourcesForUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllocableResourcesForUser_args> {
      public getAllocableResourcesForUser() {
        super("getAllocableResourcesForUser");
      }

      public getAllocableResourcesForUser_args getEmptyArgsInstance() {
        return new getAllocableResourcesForUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllocableResourcesForUser_result getResult(I iface, getAllocableResourcesForUser_args args) throws org.apache.thrift.TException {
        getAllocableResourcesForUser_result result = new getAllocableResourcesForUser_result();
        try {
          result.success = iface.getAllocableResourcesForUser(args.userID, args.gatewayID);
        } catch (org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllocableResourcesForUser", new getAllocableResourcesForUser());
      return processMap;
    }

    public static class getAllocableResourcesForUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllocableResourcesForUser_args, List<org.apache.airavata.model.allocation.ResourceDiscovery>> {
      public getAllocableResourcesForUser() {
        super("getAllocableResourcesForUser");
      }

      public getAllocableResourcesForUser_args getEmptyArgsInstance() {
        return new getAllocableResourcesForUser_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.allocation.ResourceDiscovery>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.allocation.ResourceDiscovery>>() { 
          public void onComplete(List<org.apache.airavata.model.allocation.ResourceDiscovery> o) {
            getAllocableResourcesForUser_result result = new getAllocableResourcesForUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllocableResourcesForUser_result result = new getAllocableResourcesForUser_result();
            if (e instanceof org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException) {
                        result.ex = (org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllocableResourcesForUser_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.allocation.ResourceDiscovery>> resultHandler) throws TException {
        iface.getAllocableResourcesForUser(args.userID, args.gatewayID,resultHandler);
      }
    }

  }

  public static class getAllocableResourcesForUser_args implements org.apache.thrift.TBase<getAllocableResourcesForUser_args, getAllocableResourcesForUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllocableResourcesForUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllocableResourcesForUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GATEWAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gatewayID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllocableResourcesForUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllocableResourcesForUser_argsTupleSchemeFactory());
    }

    public String userID; // required
    public String gatewayID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userID"),
      GATEWAY_ID((short)2, "gatewayID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // GATEWAY_ID
            return GATEWAY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GATEWAY_ID, new org.apache.thrift.meta_data.FieldMetaData("gatewayID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllocableResourcesForUser_args.class, metaDataMap);
    }

    public getAllocableResourcesForUser_args() {
    }

    public getAllocableResourcesForUser_args(
      String userID,
      String gatewayID)
    {
      this();
      this.userID = userID;
      this.gatewayID = gatewayID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllocableResourcesForUser_args(getAllocableResourcesForUser_args other) {
      if (other.isSetUserID()) {
        this.userID = other.userID;
      }
      if (other.isSetGatewayID()) {
        this.gatewayID = other.gatewayID;
      }
    }

    public getAllocableResourcesForUser_args deepCopy() {
      return new getAllocableResourcesForUser_args(this);
    }

    @Override
    public void clear() {
      this.userID = null;
      this.gatewayID = null;
    }

    public String getUserID() {
      return this.userID;
    }

    public getAllocableResourcesForUser_args setUserID(String userID) {
      this.userID = userID;
      return this;
    }

    public void unsetUserID() {
      this.userID = null;
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return this.userID != null;
    }

    public void setUserIDIsSet(boolean value) {
      if (!value) {
        this.userID = null;
      }
    }

    public String getGatewayID() {
      return this.gatewayID;
    }

    public getAllocableResourcesForUser_args setGatewayID(String gatewayID) {
      this.gatewayID = gatewayID;
      return this;
    }

    public void unsetGatewayID() {
      this.gatewayID = null;
    }

    /** Returns true if field gatewayID is set (has been assigned a value) and false otherwise */
    public boolean isSetGatewayID() {
      return this.gatewayID != null;
    }

    public void setGatewayIDIsSet(boolean value) {
      if (!value) {
        this.gatewayID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((String)value);
        }
        break;

      case GATEWAY_ID:
        if (value == null) {
          unsetGatewayID();
        } else {
          setGatewayID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserID();

      case GATEWAY_ID:
        return getGatewayID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserID();
      case GATEWAY_ID:
        return isSetGatewayID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllocableResourcesForUser_args)
        return this.equals((getAllocableResourcesForUser_args)that);
      return false;
    }

    public boolean equals(getAllocableResourcesForUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userID = true && this.isSetUserID();
      boolean that_present_userID = true && that.isSetUserID();
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (!this.userID.equals(that.userID))
          return false;
      }

      boolean this_present_gatewayID = true && this.isSetGatewayID();
      boolean that_present_gatewayID = true && that.isSetGatewayID();
      if (this_present_gatewayID || that_present_gatewayID) {
        if (!(this_present_gatewayID && that_present_gatewayID))
          return false;
        if (!this.gatewayID.equals(that.gatewayID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userID = true && (isSetUserID());
      list.add(present_userID);
      if (present_userID)
        list.add(userID);

      boolean present_gatewayID = true && (isSetGatewayID());
      list.add(present_gatewayID);
      if (present_gatewayID)
        list.add(gatewayID);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllocableResourcesForUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGatewayID()).compareTo(other.isSetGatewayID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGatewayID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gatewayID, other.gatewayID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllocableResourcesForUser_args(");
      boolean first = true;

      sb.append("userID:");
      if (this.userID == null) {
        sb.append("null");
      } else {
        sb.append(this.userID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gatewayID:");
      if (this.gatewayID == null) {
        sb.append("null");
      } else {
        sb.append(this.gatewayID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userID' was not present! Struct: " + toString());
      }
      if (gatewayID == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gatewayID' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllocableResourcesForUser_argsStandardSchemeFactory implements SchemeFactory {
      public getAllocableResourcesForUser_argsStandardScheme getScheme() {
        return new getAllocableResourcesForUser_argsStandardScheme();
      }
    }

    private static class getAllocableResourcesForUser_argsStandardScheme extends StandardScheme<getAllocableResourcesForUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllocableResourcesForUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userID = iprot.readString();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GATEWAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gatewayID = iprot.readString();
                struct.setGatewayIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllocableResourcesForUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userID != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userID);
          oprot.writeFieldEnd();
        }
        if (struct.gatewayID != null) {
          oprot.writeFieldBegin(GATEWAY_ID_FIELD_DESC);
          oprot.writeString(struct.gatewayID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllocableResourcesForUser_argsTupleSchemeFactory implements SchemeFactory {
      public getAllocableResourcesForUser_argsTupleScheme getScheme() {
        return new getAllocableResourcesForUser_argsTupleScheme();
      }
    }

    private static class getAllocableResourcesForUser_argsTupleScheme extends TupleScheme<getAllocableResourcesForUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllocableResourcesForUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userID);
        oprot.writeString(struct.gatewayID);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllocableResourcesForUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
        struct.gatewayID = iprot.readString();
        struct.setGatewayIDIsSet(true);
      }
    }

  }

  public static class getAllocableResourcesForUser_result implements org.apache.thrift.TBase<getAllocableResourcesForUser_result, getAllocableResourcesForUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllocableResourcesForUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllocableResourcesForUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllocableResourcesForUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllocableResourcesForUser_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.allocation.ResourceDiscovery> success; // required
    public org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.allocation.ResourceDiscovery.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllocableResourcesForUser_result.class, metaDataMap);
    }

    public getAllocableResourcesForUser_result() {
    }

    public getAllocableResourcesForUser_result(
      List<org.apache.airavata.model.allocation.ResourceDiscovery> success,
      org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllocableResourcesForUser_result(getAllocableResourcesForUser_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.allocation.ResourceDiscovery> __this__success = new ArrayList<org.apache.airavata.model.allocation.ResourceDiscovery>(other.success.size());
        for (org.apache.airavata.model.allocation.ResourceDiscovery other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.allocation.ResourceDiscovery(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException(other.ex);
      }
    }

    public getAllocableResourcesForUser_result deepCopy() {
      return new getAllocableResourcesForUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.allocation.ResourceDiscovery> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.allocation.ResourceDiscovery elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.allocation.ResourceDiscovery>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.allocation.ResourceDiscovery> getSuccess() {
      return this.success;
    }

    public getAllocableResourcesForUser_result setSuccess(List<org.apache.airavata.model.allocation.ResourceDiscovery> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException getEx() {
      return this.ex;
    }

    public getAllocableResourcesForUser_result setEx(org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.allocation.ResourceDiscovery>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllocableResourcesForUser_result)
        return this.equals((getAllocableResourcesForUser_result)that);
      return false;
    }

    public boolean equals(getAllocableResourcesForUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllocableResourcesForUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllocableResourcesForUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllocableResourcesForUser_resultStandardSchemeFactory implements SchemeFactory {
      public getAllocableResourcesForUser_resultStandardScheme getScheme() {
        return new getAllocableResourcesForUser_resultStandardScheme();
      }
    }

    private static class getAllocableResourcesForUser_resultStandardScheme extends StandardScheme<getAllocableResourcesForUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllocableResourcesForUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.allocation.ResourceDiscovery>(_list0.size);
                  org.apache.airavata.model.allocation.ResourceDiscovery _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new org.apache.airavata.model.allocation.ResourceDiscovery();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllocableResourcesForUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.allocation.ResourceDiscovery _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllocableResourcesForUser_resultTupleSchemeFactory implements SchemeFactory {
      public getAllocableResourcesForUser_resultTupleScheme getScheme() {
        return new getAllocableResourcesForUser_resultTupleScheme();
      }
    }

    private static class getAllocableResourcesForUser_resultTupleScheme extends TupleScheme<getAllocableResourcesForUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllocableResourcesForUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.allocation.ResourceDiscovery _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllocableResourcesForUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.allocation.ResourceDiscovery>(_list5.size);
            org.apache.airavata.model.allocation.ResourceDiscovery _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new org.apache.airavata.model.allocation.ResourceDiscovery();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new org.apache.airavata.allocation.manager.cpi.exception.AllocationManagerServiceException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
